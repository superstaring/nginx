{"version":3,"sources":["serviceWorker.ts","App.tsx","ReactRender.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","App","props","className","Render","loading","id","render","container","document","getElementById","ReactDOM","registerMicroApps","name","entry","loader","activeRule","setDefaultMountApp","start","runAfterFirstMounted","console","log","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2GAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6DCLSC,MAVf,SAAaC,GACX,OACE,yBAAKC,UAAU,WACb,4BAAQA,UAAU,kBAChB,0CCAR,SAASC,EAAOF,GAAa,IACnBG,EAAYH,EAAZG,QAER,OACE,oCACE,kBAAC,EAAD,MACCA,GAAW,wBAAIF,UAAU,kBAAd,cACZ,yBAAKG,GAAG,qBAKC,SAASC,EAAT,GAAgD,IAA9BF,EAA6B,EAA7BA,QACzBG,EAAYC,SAASC,eAAe,QAC1CC,IAASJ,OAAO,kBAACH,EAAD,CAAQC,QAASA,IAAaG,GCHhDD,EAAO,CAAEF,SAAS,IAUlBO,YAAkB,CAChB,CACEC,KAAM,UACNC,MAAoC,yBACpCN,UAAW,mBACXO,OAbW,SAACV,GAAD,OAAkBE,EAAO,CAAEF,aActCW,WAAY,cAOhBC,YAAmB,YAKnBC,cAEAC,aAAqB,WACnBC,QAAQC,IAAI,kCH0FR,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLT,QAAQS,MAAMA,EAAMC,a","file":"static/js/main.1cb4dc31.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nfunction App(props: any) {\n  return (\n    <div className=\"mainapp\">\n      <header className=\"mainapp-header\">\n        <h1>QianKun</h1>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\n/**\r\n * 渲染子应用\r\n */\r\nfunction Render(props: any) {\r\n  const { loading } = props;\r\n\r\n  return (\r\n    <>\r\n      <App />\r\n      {loading && <h4 className=\"subapp-loading\">Loading...</h4>}\r\n      <div id=\"subapp-viewport\" />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default function render({ loading }: { loading: any }) {\r\n  const container = document.getElementById(\"root\");\r\n  ReactDOM.render(<Render loading={loading} />, container);\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {\n  registerMicroApps,\n  runAfterFirstMounted,\n  setDefaultMountApp,\n  start,\n  initGlobalState,\n} from \"qiankun\";\n\nimport render from \"./ReactRender\";\n\n/**\n * Step1 初始化应用（可选）\n */\nrender({ loading: true });\n\nconst loader = (loading: any) => render({ loading });\n\n/**\n * Step2 注册子应用\n */\n\nconst isDev = process.env.NODE_ENV === \"development\";\n\nregisterMicroApps([\n  {\n    name: \"react16\",\n    entry: isDev ? \"//localhost:7000\" : \"/react16App/index.html\",\n    container: \"#subapp-viewport\",\n    loader,\n    activeRule: \"/react16\",\n  },\n]);\n\n/**\n * Step3 设置默认进入的子应用\n */\nsetDefaultMountApp(\"/react16\");\n\n/**\n * Step4 启动应用\n */\nstart();\n\nrunAfterFirstMounted(() => {\n  console.log(\"[MainApp] first app mounted\");\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}